<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			   minWidth="955" minHeight="600" xmlns:components="flatSpark.components.*" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ns="http://flex.apache.org/experimental/ns">
	
	<fx:Style>
		@namespace ns "http://flex.apache.org/experimental/ns";
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "flatSpark.components.*";
		
		s|Button {
			skinClass: ClassReference("flatSpark.skins.ButtonSkin");
		}
		
		s|TextInput {
			skinClass: ClassReference("flatSpark.skins.TextInputSkin");
		}
		
		s|CheckBox {
			skinClass: ClassReference("flatSpark.skins.CheckBoxSkin");
		}
		
		s|RadioButton {
			skinClass: ClassReference("flatSpark.skins.RadioButtonSkin");
		}
		
		s|CheckBox {
			skinClass: ClassReference("flatSpark.skins.CheckBoxSkin");
		}
		
		s|RadioButton {
			skinClass: ClassReference("flatSpark.skins.RadioButtonSkin");
		}
		
		s|TitleWindow {
			skinClass: ClassReference("flatSpark.skins.TitleWindowSkin");
		}
		
		s|Panel {
			skinClass: ClassReference("flatSpark.skins.PanelSkin");
		}
		
		s|ComboBox {
			skinClass: ClassReference("flatSpark.skins.ComboBoxSkin");
		}
		
		s|DropDownList {
			skinClass: ClassReference("flatSpark.skins.DropDownListSkin");
		}
		
		ns|ProgressBar {
			skinClass: ClassReference("flatSpark.skins.ProgressBarSkin");
		}
		
		ns|Alert {
			skinClass: ClassReference("flatSpark.skins.AlertSkin");
		}
		
		global
		{
			modal-transparency: 0.85;
			modal-transparency-blur: 1;
			modal-transparency-color: #000000;
		}
		
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			import spark.components.Alert;
			
			import flatSpark.enums.BrandColorEnum;
			import flatSpark.enums.ButtonSizeEnum;
			import flatSpark.enums.TextInputSizeEnum;
			import flatSpark.utils.AwesomeUtils;
						
			protected function clickButton(event:Event):void
			{
				// TODO Auto-generated method stub
				var testeTitleWindow:TestTitleWindow;	
				testeTitleWindow = new TestTitleWindow();
//				testeTitleWindow.setStyle("modalTransparency",0.85);
//				testeTitleWindow.setStyle("modalTransparencyBlur",1);
//				testeTitleWindow.setStyle("modalTransparencyColor", 0x000000);
				PopUpManager.addPopUp(testeTitleWindow, this, true);
			}
			
			public function alertButton(event:Event):void
			{
				Alert.show("To-do: Need to adjust the styles for buttons", "Alert title", Alert.OK | Alert.CANCEL | Alert.YES | Alert.NO);//, this, onAlertClosed , imgCls, 2 );	
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:ZipCodeValidator id="zipV" 
							 source="{teste}" 
							 property="text" 
							 triggerEvent="change"/>
	</fx:Declarations>
	<s:Scroller width="100%" height="100%">
		<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="20" width="100%" height="100%">
			<s:HGroup gap="20" width="100%">
				<components:ButtonIcon label="Primary Button" width="213" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Primary}"/>
				<components:ButtonIcon label="Warning Button" width="213" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Warning}"/>
				<components:ButtonIcon label="Default Button" width="213" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Default}"/>
				<components:ButtonIcon label="Danger Button" width="213" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Danger}"/>
			</s:HGroup>
			<s:HGroup gap="20" width="100%">
				<components:ButtonIcon label="Success Button" width="213" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Success}"/>
				<components:ButtonIcon label="Inverse Button" width="213" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Inverse}"/>
				<components:ButtonIcon iconFont="{AwesomeUtils.fa_info_circle}" label="Info Button" height="{ButtonSizeEnum.Large}"  width="213" brand="{BrandColorEnum.Info}"/>
				<components:ButtonIcon label="Disabled Button" width="213" height="{ButtonSizeEnum.Large}" enabled="false" brand="{BrandColorEnum.Danger}"/>
			</s:HGroup>
			<s:HGroup gap="20" width="100%">
				<components:ButtonIcon label="Extra Small" height="{ButtonSizeEnum.ExtraSmall}" brand="{BrandColorEnum.Inverse}" iconFont="{AwesomeUtils.fa_star_o}"/>
				<components:ButtonIcon label="Small" height="{ButtonSizeEnum.Small}" brand="{BrandColorEnum.Inverse}" iconFont="{AwesomeUtils.fa_star_o}"/>
				<components:ButtonIcon label="Normal" height="{ButtonSizeEnum.Normal}" brand="{BrandColorEnum.Inverse}" iconFont="{AwesomeUtils.fa_star_o}"/>
				<components:ButtonIcon label="Large" height="{ButtonSizeEnum.Large}" brand="{BrandColorEnum.Inverse}" iconFont="{AwesomeUtils.fa_star_o}" />
			</s:HGroup>
			
			<s:Label id="iconFont" color="0x000000" text="{AwesomeUtils.fa_flag}"
					 textAlign="left" fontSize="100" fontFamily="FontAwesome">
			</s:Label>
			
			<s:HGroup>
				<components:TextInputIcon id="teste" prompt="Error" />
				<components:TextInputIcon text="No Icon" />
				<components:TextInputIcon width="200" iconFont="{AwesomeUtils.fa_user}"/>
				<components:TextInputIcon enabled="false"  iconFont="{AwesomeUtils.fa_star}" text="disabled"/>
			</s:HGroup>
			<s:HGroup>
				<components:TextInputIcon width="200" iconFont="{AwesomeUtils.fa_user}" prompt="Small" height="{TextInputSizeEnum.Small}"/>
				<components:TextInputIcon width="200" iconFont="{AwesomeUtils.fa_user}" prompt="Normal" height="{TextInputSizeEnum.Normal}"/>
				<components:TextInputIcon width="200" iconFont="{AwesomeUtils.fa_user}" prompt="Large" height="{TextInputSizeEnum.Large}"/>
			</s:HGroup>
			
			<s:HGroup>
				<components:ToggleSwitch/>
				<components:ToggleSwitch selectedLabel="Test 1" deselectedLabel="Test 2" selected="true"/>
				<components:ToggleSwitch selectedLabel="Disabled" deselectedLabel="Disabled" selected="true" enabled="false"/>
				<components:ToggleSwitch selectedLabel="Disabled" deselectedLabel="Disabled" enabled="false"/>
			</s:HGroup>
			
			<s:HGroup>
				<s:CheckBox label="Test"/>
				<s:CheckBox label="Selecionado" selected="true"/>
				<s:CheckBox label="Desabilitado" selected="true" enabled="false"/>
				<s:CheckBox label="Desabilitado" enabled="false"/>
			</s:HGroup>
			
			<s:HGroup>
				<s:RadioButton label="Test" groupName="grupo1"/>
				<s:RadioButton label="Test 2" selected="true" groupName="grupo1"/>
				<s:RadioButton label="Desabilitado" groupName="grupo2" selected="true" enabled="false"/>
				<s:RadioButton label="Desabilitado" groupName="grupo2"  enabled="false"/>
			</s:HGroup>
			
			<s:HGroup>
				<s:Button label="Open PopUp" click="{clickButton(event)}"/>
				<s:Button label="Open Alert" click="{alertButton(event)}"/>
			</s:HGroup>
			
			<s:HGroup>
				<s:ComboBox prompt="Select...">
					<s:dataProvider>
						<s:ArrayList>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
							<fx:String>Durche die Wuste</fx:String>
							<fx:String>Samurai</fx:String>
							<fx:String>Traumfabrik</fx:String>
						</s:ArrayList>
					</s:dataProvider>        
				</s:ComboBox>
				<s:DropDownList  width="200" id="dropDownLst" requireSelection="true">
					<s:dataProvider>
						<s:ArrayList source="[The,quick,brown,fox,jumps,over,the,lazy,dog]" />
					</s:dataProvider>
				</s:DropDownList> 
			</s:HGroup>
			
			<s:HGroup>
				<ns:ProgressBar id="progress" 
								width="300" 
								totalProgress="100" 
								currentProgress="{slider.value}"
								displayPercents="true"
								direction="left"/>
				<s:HSlider id="slider" minimum="0" maximum="100" value="75" top="60" showDataTip="false" />
			</s:HGroup>
			
			<s:HGroup>
				<s:Panel width="555" height="300" title="Panel title 1">
					<s:Label left="10" top="10" fontFamily="Lato" fontSize="16" color="0x000000" text="Panel content"/>
				</s:Panel>
				<s:Spacer width="30"/>
				<s:Panel width="555" height="300" title="Panel title 2">
					<s:Label left="10" top="10" fontFamily="Lato" fontSize="16" color="0x000000" text="Panel content"/>
					<s:controlBarContent>
						<components:ButtonIcon brand="{BrandColorEnum.Primary}" label="Help"/>
					</s:controlBarContent>
				</s:Panel>
			</s:HGroup>
			
		</s:VGroup>
	</s:Scroller>
</s:Application>
